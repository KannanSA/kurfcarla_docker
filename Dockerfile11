# Stage 1: Build LAMMPS with ML-QUIP and GAP support
# This stage compiles LAMMPS from source to ensure the correct packages are included.
FROM ubuntu:22.04 AS builder

# Install build dependencies: compilers, git, cmake, and mpi
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    gfortran \
    libopenmpi-dev \
    openmpi-bin \
    liblapack-dev \
    && rm -rf /var/lib/apt/lists/*

# Set a build directory
WORKDIR /build

# Clone the required repositories
RUN git clone --recursive https://github.com/libAtoms/QUIP.git
RUN git clone -b stable_2Aug2023 https://github.com/lammps/lammps.git

# --- Corrected QUIP Build Procedure ---
WORKDIR /build/QUIP
ENV QUIP_ARCH=linux_x86_64_gfortran
# 1. Run the 'config' command to generate the correct Makefile for the architecture.
#    This step was missing and is the key to fixing the build errors.
RUN make config QUIP_ARCH=${QUIP_ARCH}
# 2. Now, run 'make' to build the QUIP libraries.
RUN make

# --- LAMMPS Build ---
WORKDIR /build/lammps/
RUN mkdir build && cd build && \
    cmake ../cmake \
      -D PKG_ML-QUIP=yes \
      -D ML_QUIP_INC_DIR=/build/QUIP/build/${QUIP_ARCH} \
      -D ML_QUIP_LINK_DIR=/build/QUIP/build/${QUIP_ARCH} \
      -D BUILD_MPI=yes \
      -D CMAKE_BUILD_TYPE=Release && \
    make -j$(nproc)

# ---

# Stage 2: Create the final, clean runtime image
FROM ubuntu:22.04

# Avoid interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install runtime dependencies for our compiled LAMMPS and for Python
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    liblapack3 \
    libgfortran5 \
    libopenmpi3 \
    && rm -rf /var/lib/apt/lists/*

# Set the application working directory
WORKDIR /app

# Copy python requirements and install them
COPY requirements.txt .
RUN pip3 install --no-cache-dir -r requirements.txt

# First, copy all your project files (python script, data) into the container.
COPY . .

# Second, copy the freshly compiled lmp executable from the 'builder' stage.
# This will OVERWRITE any 'lmp' file from the previous step, ensuring the correct
# executable with ML-QUIP support is used.
COPY --from=builder /build/lammps/build/lmp .

# Specify the default command to run when the container starts.
CMD ["python3", "lammps_runner.py"]
